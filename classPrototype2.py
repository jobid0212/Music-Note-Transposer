# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'classPrototype.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from ImageHoverWidget2 import ImageHoverWidget  # Import the ImageHoverWidget class
from PyQt5.QtCore import QSize

# for setting the background color of the window to white
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QPalette, QColor
import sys
from resource_utils import get_resource_path # Importing class and function created by Claude 3.7 to make the executable load images correctly

from PyQt5.QtCore import QT_VERSION_STR, PYQT_VERSION_STR

print("Qt version:", QT_VERSION_STR)  # Qt library version
print("PyQt version:", PYQT_VERSION_STR)  # PyQt binding version

# Absolute path to the images (helps with displaying images in executable)
wholeNotePath = get_resource_path("wholenote.png")
flatPath = get_resource_path("flat.png")
naturalPath = get_resource_path("natural.png")
sharpPath = get_resource_path("sharp.png")
trebelClefPath = get_resource_path("trebelclef.png")
arrowPath = get_resource_path("arrow.png")
altoClefPath = get_resource_path("altoclef.png")
bassClefPath = get_resource_path("bassclef3.png")


# keeps track of whether notes should be transposed/outputted as sharps or flats
accidentalTheme = "Natural"

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

# OUTPUT SIDE
# -----------
        # Output notes order top to bottom
        self.eNote = QtWidgets.QLabel(self.centralwidget)
        self.eNote.setGeometry(QtCore.QRect(1500, 498, 100, 106))
        self.eNote.setText("")
        self.eNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.eNote.setScaledContents(True)
        self.eNote.setObjectName("eNote")
        self.dNote = QtWidgets.QLabel(self.centralwidget)
        self.dNote.setGeometry(QtCore.QRect(1640, 527, 100, 106))
        self.dNote.setText("")
        self.dNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.dNote.setScaledContents(True)
        self.dNote.setObjectName("dNote")
        self.cNote = QtWidgets.QLabel(self.centralwidget)
        self.cNote.setGeometry(QtCore.QRect(1500, 556, 100, 106))
        self.cNote.setText("")
        self.cNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.cNote.setScaledContents(True)
        self.cNote.setObjectName("cNote")
        self.bNote = QtWidgets.QLabel(self.centralwidget)
        self.bNote.setGeometry(QtCore.QRect(1640, 585, 100, 106))
        self.bNote.setText("")
        self.bNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.bNote.setScaledContents(True)
        self.bNote.setObjectName("bNote")
        self.aNote = QtWidgets.QLabel(self.centralwidget)
        self.aNote.setGeometry(QtCore.QRect(1500, 614, 100, 106))
        self.aNote.setText("")
        self.aNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.aNote.setScaledContents(True)
        self.aNote.setObjectName("aNote")
        self.gNote = QtWidgets.QLabel(self.centralwidget)
        self.gNote.setGeometry(QtCore.QRect(1640, 643, 100, 106))
        self.gNote.setText("")
        self.gNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.gNote.setScaledContents(True)
        self.gNote.setObjectName("gNote")
        self.fNote = QtWidgets.QLabel(self.centralwidget)
        self.fNote.setGeometry(QtCore.QRect(1500, 672, 100, 106))
        self.fNote.setText("")
        self.fNote.setPixmap(QtGui.QPixmap(wholeNotePath))
        self.fNote.setScaledContents(True)
        self.fNote.setObjectName("fNote")

        # Output accidentals order top to bottom
        self.eOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.eOutAccidental.setGeometry(QtCore.QRect(1480, 510, 27, 60))
        self.eOutAccidental.setText("")
        self.eOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.eOutAccidental.setScaledContents(True)
        self.eOutAccidental.setObjectName("eOutAccidental")
        self.dOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.dOutAccidental.setGeometry(QtCore.QRect(1620, 539, 27, 60))
        self.dOutAccidental.setText("")
        self.dOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.dOutAccidental.setScaledContents(True)
        self.dOutAccidental.setObjectName("dOutAccidental")
        self.cOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.cOutAccidental.setGeometry(QtCore.QRect(1480, 568, 27, 60))
        self.cOutAccidental.setText("")
        self.cOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.cOutAccidental.setScaledContents(True)
        self.cOutAccidental.setObjectName("cOutAccidental")
        self.bOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.bOutAccidental.setGeometry(QtCore.QRect(1620, 597, 27, 60))
        self.bOutAccidental.setText("")
        self.bOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.bOutAccidental.setScaledContents(True)
        self.bOutAccidental.setObjectName("bOutAccidental")
        self.aOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.aOutAccidental.setGeometry(QtCore.QRect(1480, 626, 27, 60))
        self.aOutAccidental.setText("")
        self.aOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.aOutAccidental.setScaledContents(True)
        self.aOutAccidental.setObjectName("aOutAccidental")
        self.gOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.gOutAccidental.setGeometry(QtCore.QRect(1620, 655, 27, 60))
        self.gOutAccidental.setText("")
        self.gOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.gOutAccidental.setScaledContents(True)
        self.gOutAccidental.setObjectName("gOutAccidental")
        self.fOutAccidental = QtWidgets.QLabel(self.centralwidget)
        self.fOutAccidental.setGeometry(QtCore.QRect(1480, 684, 27, 60))
        self.fOutAccidental.setText("")
        self.fOutAccidental.setPixmap(QtGui.QPixmap(flatPath))
        self.fOutAccidental.setScaledContents(True)
        self.fOutAccidental.setObjectName("fOutAccidental")

        # staff lines for output ordered top to bottom
        self.line1 = QtWidgets.QFrame(self.centralwidget)
        self.line1.setGeometry(QtCore.QRect(1210, 512, 701, 20))
        self.line1.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line1.setPalette(palette)
        self.line1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line1.setLineWidth(0)
        self.line1.setMidLineWidth(2)
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setObjectName("line1")
        self.line2 = QtWidgets.QFrame(self.centralwidget)
        self.line2.setGeometry(QtCore.QRect(1210, 570, 701, 20))
        self.line2.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line2.setPalette(palette)
        self.line2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line2.setLineWidth(0)
        self.line2.setMidLineWidth(2)
        self.line2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line2.setObjectName("line2")
        self.line3 = QtWidgets.QFrame(self.centralwidget)
        self.line3.setGeometry(QtCore.QRect(1210, 628, 701, 20))
        self.line3.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line3.setPalette(palette)
        self.line3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line3.setLineWidth(0)
        self.line3.setMidLineWidth(2)
        self.line3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line3.setObjectName("line3")
        self.line4 = QtWidgets.QFrame(self.centralwidget)
        self.line4.setGeometry(QtCore.QRect(1210, 686, 701, 20))
        self.line4.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line4.setPalette(palette)
        self.line4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line4.setLineWidth(0)
        self.line4.setMidLineWidth(2)
        self.line4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line4.setObjectName("line4")
        self.line5 = QtWidgets.QFrame(self.centralwidget)
        self.line5.setGeometry(QtCore.QRect(1210, 744, 701, 20))
        self.line5.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line5.setPalette(palette)
        self.line5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line5.setLineWidth(0)
        self.line5.setMidLineWidth(2)
        self.line5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line5.setObjectName("line5")

        # Clef image for output staff
        self.clefOut = QtWidgets.QLabel(self.centralwidget)
        self.clefOut.setGeometry(QtCore.QRect(1250, 476, 181, 361))
        self.clefOut.setText("")
        self.clefOut.setPixmap(QtGui.QPixmap(trebelClefPath))
        self.clefOut.setScaledContents(True)
        self.clefOut.setObjectName("clefOut")

        # Label for the output staff 
        # text = "Treble Clef in Concert C Major"
        # change text in translateUI method
        self.outputLabel = QtWidgets.QLabel(self.centralwidget)
        self.outputLabel.setGeometry(QtCore.QRect(1270, 338, 641, 131))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.outputLabel.setFont(font)
        self.outputLabel.setObjectName("outputLabel")

        # Arrow image between the two staffs
        self.arrow = QtWidgets.QLabel(self.centralwidget)
        self.arrow.setGeometry(QtCore.QRect(790, 440, 291, 371))
        self.arrow.setText("")
        self.arrow.setPixmap(QtGui.QPixmap(arrowPath))
        self.arrow.setScaledContents(True)
        self.arrow.setObjectName("arrow")

# INPUT SIDE
# ----------
        # Input notes ordered from top to bottom
        # Replacing QLabel with ImageHoverWidget
        # ImageHoverWidget just allows me to more easily show/hide images of labels
        # The labels will display a corresponding note when the user hovers over it (actually over the hoverWidgetLabels) with their mouse
        self.input7G = ImageHoverWidget() # Use ImageHoverWidget here
        self.input7G.setGeometry(QtCore.QRect(450, 326, 50, 53))
        self.input7G.setObjectName("input7G")
        self.input7G.setParent(self.centralwidget)  # Add it to the central widget
        self.input7F = ImageHoverWidget()
        self.input7F.setGeometry(QtCore.QRect(450, 339, 50, 53))
        self.input7F.setObjectName("input7F")
        self.input7F.setParent(self.centralwidget)
        self.input7E = ImageHoverWidget()
        self.input7E.setGeometry(QtCore.QRect(450, 355, 50, 53))
        self.input7E.setObjectName("input7E")
        self.input7E.setParent(self.centralwidget)       
        self.input7D = ImageHoverWidget()
        self.input7D.setGeometry(QtCore.QRect(450, 368, 50, 53))
        self.input7D.setObjectName("input7D")
        self.input7D.setParent(self.centralwidget)       
        self.input7C = ImageHoverWidget()
        self.input7C.setGeometry(QtCore.QRect(450, 384, 50, 53))
        self.input7C.setObjectName("input7C")
        self.input7C.setParent(self.centralwidget)       
        self.input6B = ImageHoverWidget()
        self.input6B.setGeometry(QtCore.QRect(450, 397, 50, 53))
        self.input6B.setObjectName("input6B")
        self.input6B.setParent(self.centralwidget)       
        self.input6A = ImageHoverWidget()
        self.input6A.setGeometry(QtCore.QRect(450, 413, 50, 53))
        self.input6A.setObjectName("input6A")
        self.input6A.setParent(self.centralwidget)      
        self.input6G = ImageHoverWidget()
        self.input6G.setGeometry(QtCore.QRect(450, 426, 50, 53))
        self.input6G.setObjectName("input6G")
        self.input6G.setParent(self.centralwidget)      
        self.input6F = ImageHoverWidget()
        self.input6F.setGeometry(QtCore.QRect(450, 442, 50, 53))
        self.input6F.setObjectName("input6F")
        self.input6F.setParent(self.centralwidget)   
        self.input6E = ImageHoverWidget()
        self.input6E.setGeometry(QtCore.QRect(450, 455, 50, 53))
        self.input6E.setObjectName("input6E")
        self.input6E.setParent(self.centralwidget)
        self.input6D = ImageHoverWidget()
        self.input6D.setGeometry(QtCore.QRect(450, 471, 50, 53))
        self.input6D.setObjectName("input6D")
        self.input6D.setParent(self.centralwidget)
        self.input6C = ImageHoverWidget()
        self.input6C.setGeometry(QtCore.QRect(450, 484, 50, 53))
        self.input6C.setObjectName("input6C")
        self.input6C.setParent(self.centralwidget)
        self.input5B = ImageHoverWidget()
        self.input5B.setGeometry(QtCore.QRect(450, 500, 50, 53))
        self.input5B.setObjectName("input5B")
        self.input5B.setParent(self.centralwidget)
        self.input5A = ImageHoverWidget()
        self.input5A.setGeometry(QtCore.QRect(450, 513, 50, 53))
        self.input5A.setObjectName("input5A")
        self.input5A.setParent(self.centralwidget)
        self.input5G = ImageHoverWidget()
        self.input5G.setGeometry(QtCore.QRect(450, 528, 50, 52))
        self.input5G.setObjectName("input5G")
        self.input5G.setParent(self.centralwidget)
        self.input5F = ImageHoverWidget()
        self.input5F.setGeometry(QtCore.QRect(450, 541, 50, 53))
        self.input5F.setObjectName("input5F")
        self.input5F.setParent(self.centralwidget)
        self.input5E = ImageHoverWidget()
        self.input5E.setGeometry(QtCore.QRect(450, 556, 50, 53))
        self.input5E.setObjectName("input5E")
        self.input5E.setParent(self.centralwidget)
        self.input5D = ImageHoverWidget()
        self.input5D.setGeometry(QtCore.QRect(450, 570, 50, 53))
        self.input5D.setObjectName("input5D")
        self.input5D.setParent(self.centralwidget)
        self.input5C = ImageHoverWidget()
        self.input5C.setGeometry(QtCore.QRect(450, 585, 50, 53))
        self.input5C.setObjectName("input5C")
        self.input5C.setParent(self.centralwidget)
        self.input4B = ImageHoverWidget()
        self.input4B.setGeometry(QtCore.QRect(450, 599, 50, 53))
        self.input4B.setObjectName("input4B")
        self.input4B.setParent(self.centralwidget)
        self.input4A = ImageHoverWidget()
        self.input4A.setGeometry(QtCore.QRect(450, 614, 50, 53))
        self.input4A.setObjectName("input4A")
        self.input4A.setParent(self.centralwidget)
        self.input4G = ImageHoverWidget()
        self.input4G.setGeometry(QtCore.QRect(450, 628, 50, 53))
        self.input4G.setObjectName("input4G")
        self.input4G.setParent(self.centralwidget)
        self.input4F = ImageHoverWidget()
        self.input4F.setGeometry(QtCore.QRect(450, 643, 50, 53))
        self.input4F.setObjectName("input4F")
        self.input4F.setParent(self.centralwidget)
        self.input4E = ImageHoverWidget()
        self.input4E.setGeometry(QtCore.QRect(450, 657, 50, 53))
        self.input4E.setObjectName("input4E")
        self.input4E.setParent(self.centralwidget)
        self.input4D = ImageHoverWidget()
        self.input4D.setGeometry(QtCore.QRect(450, 673, 50, 53))
        self.input4D.setObjectName("input4D")
        self.input4D.setParent(self.centralwidget)
        self.input4C = ImageHoverWidget()
        self.input4C.setGeometry(QtCore.QRect(450, 687, 50, 53))
        self.input4C.setObjectName("input4C")
        self.input4C.setParent(self.centralwidget)
        self.input3B = ImageHoverWidget()
        self.input3B.setGeometry(QtCore.QRect(450, 703, 50, 53))
        self.input3B.setObjectName("input3B")
        self.input3B.setParent(self.centralwidget)
        self.input3A = ImageHoverWidget()
        self.input3A.setGeometry(QtCore.QRect(450, 717, 50, 53))
        self.input3A.setObjectName("input3A")
        self.input3A.setParent(self.centralwidget)
        self.input3G = ImageHoverWidget()
        self.input3G.setGeometry(QtCore.QRect(450, 732, 50, 53))
        self.input3G.setObjectName("input3G")
        self.input3G.setParent(self.centralwidget)
        self.input3F = ImageHoverWidget()
        self.input3F.setGeometry(QtCore.QRect(450, 746, 50, 53))
        self.input3F.setObjectName("input3F")
        self.input3F.setParent(self.centralwidget)
        self.input3E = ImageHoverWidget()
        self.input3E.setGeometry(QtCore.QRect(450, 761, 50, 53))
        self.input3E.setObjectName("input3E")
        self.input3E.setParent(self.centralwidget)
        self.input3D = ImageHoverWidget()
        self.input3D.setGeometry(QtCore.QRect(450, 775, 50, 53))
        self.input3D.setObjectName("input3D")
        self.input3D.setParent(self.centralwidget)
        self.input3C = ImageHoverWidget()
        self.input3C.setGeometry(QtCore.QRect(450, 790, 50, 53))
        self.input3C.setObjectName("input3C")
        self.input3C.setParent(self.centralwidget)
        self.input2B = ImageHoverWidget()
        self.input2B.setGeometry(QtCore.QRect(450, 804, 50, 53))
        self.input2B.setObjectName("input2B")
        self.input2B.setParent(self.centralwidget)
        self.input2A = ImageHoverWidget()
        self.input2A.setGeometry(QtCore.QRect(450, 819, 50, 53))
        self.input2A.setObjectName("input2A")
        self.input2A.setParent(self.centralwidget)
        self.input2G = ImageHoverWidget()
        self.input2G.setGeometry(QtCore.QRect(450, 833, 50, 53))
        self.input2G.setObjectName("input2G")
        self.input2G.setParent(self.centralwidget)
        self.input2F = ImageHoverWidget()
        self.input2F.setGeometry(QtCore.QRect(450, 848, 50, 53))
        self.input2F.setObjectName("input2F")
        self.input2F.setParent(self.centralwidget)
        self.input2E = ImageHoverWidget()
        self.input2E.setGeometry(QtCore.QRect(450, 862, 50, 53))
        self.input2E.setObjectName("input2E")
        self.input2E.setParent(self.centralwidget)
        self.input2D = ImageHoverWidget()
        self.input2D.setGeometry(QtCore.QRect(450, 877, 50, 53))
        self.input2D.setObjectName("input2D")
        self.input2D.setParent(self.centralwidget)

        # Staff lines for input ordered top to bottom
        self.line0_1 = QtWidgets.QFrame(self.centralwidget)
        self.line0_1.setGeometry(QtCore.QRect(430, 357, 91, 20))
        self.line0_1.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_1.setPalette(palette)
        self.line0_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_1.setLineWidth(0)
        self.line0_1.setMidLineWidth(2)
        self.line0_1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_1.setObjectName("line0_1")
        self.line0_2 = QtWidgets.QFrame(self.centralwidget)
        self.line0_2.setGeometry(QtCore.QRect(430, 386, 91, 20))
        self.line0_2.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_2.setPalette(palette)
        self.line0_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_2.setLineWidth(0)
        self.line0_2.setMidLineWidth(2)
        self.line0_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_2.setObjectName("line0_2")
        self.line0_3 = QtWidgets.QFrame(self.centralwidget)
        self.line0_3.setGeometry(QtCore.QRect(430, 415, 91, 20))
        self.line0_3.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_3.setPalette(palette)
        self.line0_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_3.setLineWidth(0)
        self.line0_3.setMidLineWidth(2)
        self.line0_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_3.setObjectName("line0_3")
        self.line0_4 = QtWidgets.QFrame(self.centralwidget)
        self.line0_4.setGeometry(QtCore.QRect(430, 444, 91, 20))
        self.line0_4.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_4.setPalette(palette)
        self.line0_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_4.setLineWidth(0)
        self.line0_4.setMidLineWidth(2)
        self.line0_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_4.setObjectName("line0_4")
        self.line0_5 = QtWidgets.QFrame(self.centralwidget)
        self.line0_5.setGeometry(QtCore.QRect(430, 473, 91, 20))
        self.line0_5.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_5.setPalette(palette)
        self.line0_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_5.setLineWidth(0)
        self.line0_5.setMidLineWidth(2)
        self.line0_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_5.setObjectName("line0_5")
        self.line0_6 = QtWidgets.QFrame(self.centralwidget)
        self.line0_6.setGeometry(QtCore.QRect(430, 502, 91, 20))
        self.line0_6.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_6.setPalette(palette)
        self.line0_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_6.setLineWidth(0)
        self.line0_6.setMidLineWidth(2)
        self.line0_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_6.setObjectName("line0_6")
        self.line0_7 = QtWidgets.QFrame(self.centralwidget)
        self.line0_7.setGeometry(QtCore.QRect(430, 531, 91, 20))
        self.line0_7.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_7.setPalette(palette)
        self.line0_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_7.setLineWidth(0)
        self.line0_7.setMidLineWidth(2)
        self.line0_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_7.setObjectName("line0_7")
        self.line0_8 = QtWidgets.QFrame(self.centralwidget)
        self.line0_8.setGeometry(QtCore.QRect(20, 560, 641, 16))
        self.line0_8.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_8.setPalette(palette)
        self.line0_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_8.setLineWidth(0)
        self.line0_8.setMidLineWidth(2)
        self.line0_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_8.setObjectName("line0_8")
        self.line0_9 = QtWidgets.QFrame(self.centralwidget)
        self.line0_9.setGeometry(QtCore.QRect(20, 589, 641, 16))
        self.line0_9.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_9.setPalette(palette)
        self.line0_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_9.setLineWidth(0)
        self.line0_9.setMidLineWidth(2)
        self.line0_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_9.setObjectName("line0_9")
        self.line0_10 = QtWidgets.QFrame(self.centralwidget)
        self.line0_10.setGeometry(QtCore.QRect(20, 618, 641, 16))
        self.line0_10.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_10.setPalette(palette)
        self.line0_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_10.setLineWidth(0)
        self.line0_10.setMidLineWidth(2)
        self.line0_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_10.setObjectName("line0_10")
        self.line0_11 = QtWidgets.QFrame(self.centralwidget)
        self.line0_11.setGeometry(QtCore.QRect(20, 647, 641, 16))
        self.line0_11.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_11.setPalette(palette)
        self.line0_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_11.setLineWidth(0)
        self.line0_11.setMidLineWidth(2)
        self.line0_11.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_11.setObjectName("line0_11")
        self.line0_12 = QtWidgets.QFrame(self.centralwidget)
        self.line0_12.setGeometry(QtCore.QRect(20, 676, 641, 16))
        self.line0_12.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_12.setPalette(palette)
        self.line0_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_12.setLineWidth(0)
        self.line0_12.setMidLineWidth(2)
        self.line0_12.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_12.setObjectName("line0_12")
        self.line0_13 = QtWidgets.QFrame(self.centralwidget)
        self.line0_13.setGeometry(QtCore.QRect(430, 705, 91, 20))
        self.line0_13.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_13.setPalette(palette)
        self.line0_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_13.setLineWidth(0)
        self.line0_13.setMidLineWidth(2)
        self.line0_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_13.setObjectName("line0_13")
        self.line0_14 = QtWidgets.QFrame(self.centralwidget)
        self.line0_14.setGeometry(QtCore.QRect(430, 734, 91, 20))
        self.line0_14.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_14.setPalette(palette)
        self.line0_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_14.setLineWidth(0)
        self.line0_14.setMidLineWidth(2)
        self.line0_14.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_14.setObjectName("line0_14")
        self.line0_15 = QtWidgets.QFrame(self.centralwidget)
        self.line0_15.setGeometry(QtCore.QRect(430, 763, 91, 20))
        self.line0_15.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_15.setPalette(palette)
        self.line0_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_15.setLineWidth(0)
        self.line0_15.setMidLineWidth(2)
        self.line0_15.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_15.setObjectName("line0_15")
        self.line0_16 = QtWidgets.QFrame(self.centralwidget)
        self.line0_16.setGeometry(QtCore.QRect(430, 792, 91, 20))
        self.line0_16.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_16.setPalette(palette)
        self.line0_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_16.setLineWidth(0)
        self.line0_16.setMidLineWidth(2)
        self.line0_16.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_16.setObjectName("line0_16")
        self.line0_17 = QtWidgets.QFrame(self.centralwidget)
        self.line0_17.setGeometry(QtCore.QRect(430, 821, 91, 20))
        self.line0_17.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_17.setPalette(palette)
        self.line0_17.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_17.setLineWidth(0)
        self.line0_17.setMidLineWidth(2)
        self.line0_17.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_17.setObjectName("line0_17")
        self.line0_18 = QtWidgets.QFrame(self.centralwidget)
        self.line0_18.setGeometry(QtCore.QRect(430, 850, 91, 20))
        self.line0_18.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_18.setPalette(palette)
        self.line0_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_18.setLineWidth(0)
        self.line0_18.setMidLineWidth(2)
        self.line0_18.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_18.setObjectName("line0_18")
        self.line0_19 = QtWidgets.QFrame(self.centralwidget)
        self.line0_19.setGeometry(QtCore.QRect(430, 879, 91, 20))
        self.line0_19.setMinimumSize(QtCore.QSize(0, 2))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        self.line0_19.setPalette(palette)
        self.line0_19.setFrameShadow(QtWidgets.QFrame.Raised)
        self.line0_19.setLineWidth(0)
        self.line0_19.setMidLineWidth(2)
        self.line0_19.setFrameShape(QtWidgets.QFrame.HLine)
        self.line0_19.setObjectName("line0_19")

        # Hover widget labels ordered top to bottom
        # When hovering over the labels, they will display a corresponding note on the input staff
        # Look at the ImageHoverWidget class for more information
        # The QLabel objects are connected to the .drawNote method.
        # The drawNote method is called when the QLabel is clicked
        self.hoverWidgetLabel7G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel7G.setGeometry(QtCore.QRect(430, 345, 91, 15))
        self.hoverWidgetLabel7G.setText("")
        self.hoverWidgetLabel7G.setObjectName("hoverWidgetLabel7G")
        # Calls drawNote method when the label is clicked
        # Calls with parameter of the note that corresponds and appears with the label is hovered over
        self.hoverWidgetLabel7G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel7F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel7F.setGeometry(QtCore.QRect(430, 360, 91, 14))
        self.hoverWidgetLabel7F.setText("")
        self.hoverWidgetLabel7F.setObjectName("hoverWidgetLabel7F")
        self.hoverWidgetLabel7F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel7E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel7E.setGeometry(QtCore.QRect(430, 374, 91, 15))
        self.hoverWidgetLabel7E.setText("")
        self.hoverWidgetLabel7E.setObjectName("hoverWidgetLabel7E")
        self.hoverWidgetLabel7E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel7D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel7D.setGeometry(QtCore.QRect(430, 389, 91, 14))
        self.hoverWidgetLabel7D.setText("")
        self.hoverWidgetLabel7D.setObjectName("hoverWidgetLabel7D")
        self.hoverWidgetLabel7D.mousePressEvent = lambda event: self.drawNote("D")

        self.hoverWidgetLabel7C = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel7C.setGeometry(QtCore.QRect(430, 403, 91, 15))
        self.hoverWidgetLabel7C.setText("")
        self.hoverWidgetLabel7C.setObjectName("hoverWidgetLabel7C")
        self.hoverWidgetLabel7C.mousePressEvent = lambda event: self.drawNote("C")

        self.hoverWidgetLabel6B = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6B.setGeometry(QtCore.QRect(430, 418, 91, 14))
        self.hoverWidgetLabel6B.setText("")
        self.hoverWidgetLabel6B.setObjectName("hoverWidgetLabel6B")
        self.hoverWidgetLabel6B.mousePressEvent = lambda event: self.drawNote("B")

        self.hoverWidgetLabel6A = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6A.setGeometry(QtCore.QRect(430, 432, 91, 15))
        self.hoverWidgetLabel6A.setText("")
        self.hoverWidgetLabel6A.setObjectName("hoverWidgetLabel6A")
        self.hoverWidgetLabel6A.mousePressEvent = lambda event: self.drawNote("A")

        self.hoverWidgetLabel6G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6G.setGeometry(QtCore.QRect(430, 447, 91, 14))
        self.hoverWidgetLabel6G.setText("")
        self.hoverWidgetLabel6G.setObjectName("hoverWidgetLabel6G")
        self.hoverWidgetLabel6G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel6F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6F.setGeometry(QtCore.QRect(430, 461, 91, 15))
        self.hoverWidgetLabel6F.setText("")
        self.hoverWidgetLabel6F.setObjectName("hoverWidgetLabel6F")
        self.hoverWidgetLabel6F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel6E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6E.setGeometry(QtCore.QRect(430, 476, 91, 14))
        self.hoverWidgetLabel6E.setText("")
        self.hoverWidgetLabel6E.setObjectName("hoverWidgetLabel6E")
        self.hoverWidgetLabel6E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel6D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6D.setGeometry(QtCore.QRect(430, 490, 91, 15))
        self.hoverWidgetLabel6D.setText("")
        self.hoverWidgetLabel6D.setObjectName("hoverWidgetLabel6D")
        self.hoverWidgetLabel6D.mousePressEvent = lambda event: self.drawNote("D")

        self.hoverWidgetLabel6C = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel6C.setGeometry(QtCore.QRect(430, 505, 91, 14))
        self.hoverWidgetLabel6C.setText("")
        self.hoverWidgetLabel6C.setObjectName("hoverWidgetLabel6C")
        self.hoverWidgetLabel6C.mousePressEvent = lambda event: self.drawNote("C")

        self.hoverWidgetLabel5B = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5B.setGeometry(QtCore.QRect(430, 519, 91, 15))
        self.hoverWidgetLabel5B.setText("")
        self.hoverWidgetLabel5B.setObjectName("hoverWidgetLabel5B")
        self.hoverWidgetLabel5B.mousePressEvent = lambda event: self.drawNote("B")

        self.hoverWidgetLabel5A = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5A.setGeometry(QtCore.QRect(430, 534, 91, 14))
        self.hoverWidgetLabel5A.setText("")
        self.hoverWidgetLabel5A.setObjectName("hoverWidgetLabel5A")
        self.hoverWidgetLabel5A.mousePressEvent = lambda event: self.drawNote("A")

        self.hoverWidgetLabel5G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5G.setGeometry(QtCore.QRect(430, 548, 91, 15))
        self.hoverWidgetLabel5G.setText("")
        self.hoverWidgetLabel5G.setObjectName("hoverWidgetLabel5G")
        self.hoverWidgetLabel5G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel5F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5F.setGeometry(QtCore.QRect(430, 563, 91, 12))
        self.hoverWidgetLabel5F.setText("")
        self.hoverWidgetLabel5F.setObjectName("hoverWidgetLabel5F")
        self.hoverWidgetLabel5F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel5E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5E.setGeometry(QtCore.QRect(430, 575, 91, 15))
        self.hoverWidgetLabel5E.setText("")
        self.hoverWidgetLabel5E.setObjectName("hoverWidgetLabel5E")
        self.hoverWidgetLabel5E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel5D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5D.setGeometry(QtCore.QRect(430, 590, 91, 14))
        self.hoverWidgetLabel5D.setText("")
        self.hoverWidgetLabel5D.setObjectName("hoverWidgetLabel5D")
        self.hoverWidgetLabel5D.mousePressEvent = lambda event: self.drawNote("D")

        self.hoverWidgetLabel5C = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel5C.setGeometry(QtCore.QRect(430, 604, 91, 15))
        self.hoverWidgetLabel5C.setText("")
        self.hoverWidgetLabel5C.setObjectName("hoverWidgetLabel5C")
        self.hoverWidgetLabel5C.mousePressEvent = lambda event: self.drawNote("C")

        self.hoverWidgetLabel4B = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4B.setGeometry(QtCore.QRect(430, 619, 91, 14))
        self.hoverWidgetLabel4B.setText("")
        self.hoverWidgetLabel4B.setObjectName("hoverWidgetLabel4B")
        self.hoverWidgetLabel4B.mousePressEvent = lambda event: self.drawNote("B")

        self.hoverWidgetLabel4A = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4A.setGeometry(QtCore.QRect(430, 633, 91, 15))
        self.hoverWidgetLabel4A.setText("")
        self.hoverWidgetLabel4A.setObjectName("hoverWidgetLabel4A")
        self.hoverWidgetLabel4A.mousePressEvent = lambda event: self.drawNote("A")

        self.hoverWidgetLabel4G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4G.setGeometry(QtCore.QRect(430, 648, 91, 14))
        self.hoverWidgetLabel4G.setText("")
        self.hoverWidgetLabel4G.setObjectName("hoverWidgetLabel4G")
        self.hoverWidgetLabel4G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel4F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4F.setGeometry(QtCore.QRect(430, 662, 91, 15))
        self.hoverWidgetLabel4F.setText("")
        self.hoverWidgetLabel4F.setObjectName("hoverWidgetLabel4F")
        self.hoverWidgetLabel4F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel4E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4E.setGeometry(QtCore.QRect(430, 677, 91, 14))
        self.hoverWidgetLabel4E.setText("")
        self.hoverWidgetLabel4E.setObjectName("hoverWidgetLabel4E")
        self.hoverWidgetLabel4E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel4D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4D.setGeometry(QtCore.QRect(430, 691, 91, 17))
        self.hoverWidgetLabel4D.setText("")
        self.hoverWidgetLabel4D.setObjectName("hoverWidgetLabel4D")
        self.hoverWidgetLabel4D.mousePressEvent = lambda event: self.drawNote("D")

        self.hoverWidgetLabel4C = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel4C.setGeometry(QtCore.QRect(430, 708, 91, 14))
        self.hoverWidgetLabel4C.setText("")
        self.hoverWidgetLabel4C.setObjectName("hoverWidgetLabel4C")
        self.hoverWidgetLabel4C.mousePressEvent = lambda event: self.drawNote("C")

        self.hoverWidgetLabel3B = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3B.setGeometry(QtCore.QRect(430, 722, 91, 15))
        self.hoverWidgetLabel3B.setText("")
        self.hoverWidgetLabel3B.setObjectName("hoverWidgetLabel3B")
        self.hoverWidgetLabel3B.mousePressEvent = lambda event: self.drawNote("B")

        self.hoverWidgetLabel3A = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3A.setGeometry(QtCore.QRect(430, 737, 91, 14))
        self.hoverWidgetLabel3A.setText("")
        self.hoverWidgetLabel3A.setObjectName("hoverWidgetLabel3A")
        self.hoverWidgetLabel3A.mousePressEvent = lambda event: self.drawNote("A")

        self.hoverWidgetLabel3G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3G.setGeometry(QtCore.QRect(430, 751, 91, 15))
        self.hoverWidgetLabel3G.setText("")
        self.hoverWidgetLabel3G.setObjectName("hoverWidgetLabel3G")
        self.hoverWidgetLabel3G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel3F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3F.setGeometry(QtCore.QRect(430, 766, 91, 14))
        self.hoverWidgetLabel3F.setText("")
        self.hoverWidgetLabel3F.setObjectName("hoverWidgetLabel3F")
        self.hoverWidgetLabel3F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel3E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3E.setGeometry(QtCore.QRect(430, 780, 91, 15))
        self.hoverWidgetLabel3E.setText("")
        self.hoverWidgetLabel3E.setObjectName("hoverWidgetLabel3E")
        self.hoverWidgetLabel3E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel3D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3D.setGeometry(QtCore.QRect(430, 795, 91, 14))
        self.hoverWidgetLabel3D.setText("")
        self.hoverWidgetLabel3D.setObjectName("hoverWidgetLabel3D")
        self.hoverWidgetLabel3D.mousePressEvent = lambda event: self.drawNote("D")

        self.hoverWidgetLabel3C = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel3C.setGeometry(QtCore.QRect(430, 809, 91, 15))
        self.hoverWidgetLabel3C.setText("")
        self.hoverWidgetLabel3C.setObjectName("hoverWidgetLabel3C")
        self.hoverWidgetLabel3C.mousePressEvent = lambda event: self.drawNote("C")

        self.hoverWidgetLabel2B = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2B.setGeometry(QtCore.QRect(430, 824, 91, 14))
        self.hoverWidgetLabel2B.setText("")
        self.hoverWidgetLabel2B.setObjectName("hoverWidgetLabel2B")
        self.hoverWidgetLabel2B.mousePressEvent = lambda event: self.drawNote("B")

        self.hoverWidgetLabel2A = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2A.setGeometry(QtCore.QRect(430, 838, 91, 15))
        self.hoverWidgetLabel2A.setText("")
        self.hoverWidgetLabel2A.setObjectName("hoverWidgetLabel2A")
        self.hoverWidgetLabel2A.mousePressEvent = lambda event: self.drawNote("A")

        self.hoverWidgetLabel2G = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2G.setGeometry(QtCore.QRect(430, 853, 91, 14))
        self.hoverWidgetLabel2G.setText("")
        self.hoverWidgetLabel2G.setObjectName("hoverWidgetLabel2G")
        self.hoverWidgetLabel2G.mousePressEvent = lambda event: self.drawNote("G")

        self.hoverWidgetLabel2F = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2F.setGeometry(QtCore.QRect(430, 867, 91, 15))
        self.hoverWidgetLabel2F.setText("")
        self.hoverWidgetLabel2F.setObjectName("hoverWidgetLabel2F")
        self.hoverWidgetLabel2F.mousePressEvent = lambda event: self.drawNote("F")

        self.hoverWidgetLabel2E = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2E.setGeometry(QtCore.QRect(430, 882, 91, 14))
        self.hoverWidgetLabel2E.setText("")
        self.hoverWidgetLabel2E.setObjectName("hoverWidgetLabel2E")
        self.hoverWidgetLabel2E.mousePressEvent = lambda event: self.drawNote("E")

        self.hoverWidgetLabel2D = QtWidgets.QLabel(self.centralwidget)
        self.hoverWidgetLabel2D.setGeometry(QtCore.QRect(430, 896, 91, 15))
        self.hoverWidgetLabel2D.setText("")
        self.hoverWidgetLabel2D.setObjectName("hoverWidgetLabel2D")
        self.hoverWidgetLabel2D.mousePressEvent = lambda event: self.drawNote("D")

        # Connect the ImageHoverWidgets objects (the inputs) with the QLabels objects (the hoverWidgetLabels)
        # enterEvent = when mouse is hovering over object
        # leaveEvent = when mouse stops hovering over the object
        # set_/show_image = show the whole note
        # hide_image = hide the whole note
        self.hoverWidgetLabel7G.enterEvent = lambda event: self.input7G.set_image(wholeNotePath) or self.input7G.show_image()
        self.hoverWidgetLabel7G.leaveEvent = lambda event: self.input7G.hide_image()
        self.hoverWidgetLabel7F.enterEvent = lambda event: self.input7F.set_image(wholeNotePath) or self.input7F.show_image()
        self.hoverWidgetLabel7F.leaveEvent = lambda event: self.input7F.hide_image()
        self.hoverWidgetLabel7E.enterEvent = lambda event: self.input7E.set_image(wholeNotePath) or self.input7E.show_image()
        self.hoverWidgetLabel7E.leaveEvent = lambda event: self.input7E.hide_image()
        self.hoverWidgetLabel7D.enterEvent = lambda event: self.input7D.set_image(wholeNotePath) or self.input7D.show_image()
        self.hoverWidgetLabel7D.leaveEvent = lambda event: self.input7D.hide_image()
        self.hoverWidgetLabel7C.enterEvent = lambda event: self.input7C.set_image(wholeNotePath) or self.input7C.show_image()
        self.hoverWidgetLabel7C.leaveEvent = lambda event: self.input7C.hide_image()
        self.hoverWidgetLabel6B.enterEvent = lambda event: self.input6B.set_image(wholeNotePath) or self.input6B.show_image()
        self.hoverWidgetLabel6B.leaveEvent = lambda event: self.input6B.hide_image()
        self.hoverWidgetLabel6A.enterEvent = lambda event: self.input6A.set_image(wholeNotePath) or self.input6A.show_image()
        self.hoverWidgetLabel6A.leaveEvent = lambda event: self.input6A.hide_image()
        self.hoverWidgetLabel6G.enterEvent = lambda event: self.input6G.set_image(wholeNotePath) or self.input6G.show_image()
        self.hoverWidgetLabel6G.leaveEvent = lambda event: self.input6G.hide_image()
        self.hoverWidgetLabel6F.enterEvent = lambda event: self.input6F.set_image(wholeNotePath) or self.input6F.show_image()
        self.hoverWidgetLabel6F.leaveEvent = lambda event: self.input6F.hide_image()
        self.hoverWidgetLabel6E.enterEvent = lambda event: self.input6E.set_image(wholeNotePath) or self.input6E.show_image()
        self.hoverWidgetLabel6E.leaveEvent = lambda event: self.input6E.hide_image()
        self.hoverWidgetLabel6D.enterEvent = lambda event: self.input6D.set_image(wholeNotePath) or self.input6D.show_image()
        self.hoverWidgetLabel6D.leaveEvent = lambda event: self.input6D.hide_image()
        self.hoverWidgetLabel6C.enterEvent = lambda event: self.input6C.set_image(wholeNotePath) or self.input6C.show_image()
        self.hoverWidgetLabel6C.leaveEvent = lambda event: self.input6C.hide_image()
        self.hoverWidgetLabel5B.enterEvent = lambda event: self.input5B.set_image(wholeNotePath) or self.input5B.show_image()
        self.hoverWidgetLabel5B.leaveEvent = lambda event: self.input5B.hide_image()
        self.hoverWidgetLabel5A.enterEvent = lambda event: self.input5A.set_image(wholeNotePath) or self.input5A.show_image()
        self.hoverWidgetLabel5A.leaveEvent = lambda event: self.input5A.hide_image()
        self.hoverWidgetLabel5G.enterEvent = lambda event: self.input5G.set_image(wholeNotePath) or self.input5G.show_image()
        self.hoverWidgetLabel5G.leaveEvent = lambda event: self.input5G.hide_image()
        self.hoverWidgetLabel5F.enterEvent = lambda event: self.input5F.set_image(wholeNotePath) or self.input5F.show_image()
        self.hoverWidgetLabel5F.leaveEvent = lambda event: self.input5F.hide_image()
        self.hoverWidgetLabel5E.enterEvent = lambda event: self.input5E.set_image(wholeNotePath) or self.input5E.show_image()
        self.hoverWidgetLabel5E.leaveEvent = lambda event: self.input5E.hide_image()
        self.hoverWidgetLabel5D.enterEvent = lambda event: self.input5D.set_image(wholeNotePath) or self.input5D.show_image()
        self.hoverWidgetLabel5D.leaveEvent = lambda event: self.input5D.hide_image()
        self.hoverWidgetLabel5C.enterEvent = lambda event: self.input5C.set_image(wholeNotePath) or self.input5C.show_image()
        self.hoverWidgetLabel5C.leaveEvent = lambda event: self.input5C.hide_image()
        self.hoverWidgetLabel4B.enterEvent = lambda event: self.input4B.set_image(wholeNotePath) or self.input4B.show_image()
        self.hoverWidgetLabel4B.leaveEvent = lambda event: self.input4B.hide_image()
        self.hoverWidgetLabel4A.enterEvent = lambda event: self.input4A.set_image(wholeNotePath) or self.input4A.show_image()
        self.hoverWidgetLabel4A.leaveEvent = lambda event: self.input4A.hide_image()
        self.hoverWidgetLabel4G.enterEvent = lambda event: self.input4G.set_image(wholeNotePath) or self.input4G.show_image()
        self.hoverWidgetLabel4G.leaveEvent = lambda event: self.input4G.hide_image()
        self.hoverWidgetLabel4F.enterEvent = lambda event: self.input4F.set_image(wholeNotePath) or self.input4F.show_image()
        self.hoverWidgetLabel4F.leaveEvent = lambda event: self.input4F.hide_image()
        self.hoverWidgetLabel4E.enterEvent = lambda event: self.input4E.set_image(wholeNotePath) or self.input4E.show_image()
        self.hoverWidgetLabel4E.leaveEvent = lambda event: self.input4E.hide_image()
        self.hoverWidgetLabel4D.enterEvent = lambda event: self.input4D.set_image(wholeNotePath) or self.input4D.show_image()
        self.hoverWidgetLabel4D.leaveEvent = lambda event: self.input4D.hide_image()
        self.hoverWidgetLabel4C.enterEvent = lambda event: self.input4C.set_image(wholeNotePath) or self.input4C.show_image()
        self.hoverWidgetLabel4C.leaveEvent = lambda event: self.input4C.hide_image()
        self.hoverWidgetLabel3B.enterEvent = lambda event: self.input3B.set_image(wholeNotePath) or self.input3B.show_image()
        self.hoverWidgetLabel3B.leaveEvent = lambda event: self.input3B.hide_image()
        self.hoverWidgetLabel3A.enterEvent = lambda event: self.input3A.set_image(wholeNotePath) or self.input3A.show_image()
        self.hoverWidgetLabel3A.leaveEvent = lambda event: self.input3A.hide_image()
        self.hoverWidgetLabel3G.enterEvent = lambda event: self.input3G.set_image(wholeNotePath) or self.input3G.show_image()
        self.hoverWidgetLabel3G.leaveEvent = lambda event: self.input3G.hide_image()
        self.hoverWidgetLabel3F.enterEvent = lambda event: self.input3F.set_image(wholeNotePath) or self.input3F.show_image()
        self.hoverWidgetLabel3F.leaveEvent = lambda event: self.input3F.hide_image()
        self.hoverWidgetLabel3E.enterEvent = lambda event: self.input3E.set_image(wholeNotePath) or self.input3E.show_image()
        self.hoverWidgetLabel3E.leaveEvent = lambda event: self.input3E.hide_image()
        self.hoverWidgetLabel3D.enterEvent = lambda event: self.input3D.set_image(wholeNotePath) or self.input3D.show_image()
        self.hoverWidgetLabel3D.leaveEvent = lambda event: self.input3D.hide_image()
        self.hoverWidgetLabel3C.enterEvent = lambda event: self.input3C.set_image(wholeNotePath) or self.input3C.show_image()
        self.hoverWidgetLabel3C.leaveEvent = lambda event: self.input3C.hide_image()
        self.hoverWidgetLabel2B.enterEvent = lambda event: self.input2B.set_image(wholeNotePath) or self.input2B.show_image()
        self.hoverWidgetLabel2B.leaveEvent = lambda event: self.input2B.hide_image()
        self.hoverWidgetLabel2A.enterEvent = lambda event: self.input2A.set_image(wholeNotePath) or self.input2A.show_image()
        self.hoverWidgetLabel2A.leaveEvent = lambda event: self.input2A.hide_image()
        self.hoverWidgetLabel2G.enterEvent = lambda event: self.input2G.set_image(wholeNotePath) or self.input2G.show_image()
        self.hoverWidgetLabel2G.leaveEvent = lambda event: self.input2G.hide_image()
        self.hoverWidgetLabel2F.enterEvent = lambda event: self.input2F.set_image(wholeNotePath) or self.input2F.show_image()
        self.hoverWidgetLabel2F.leaveEvent = lambda event: self.input2F.hide_image()
        self.hoverWidgetLabel2E.enterEvent = lambda event: self.input2E.set_image(wholeNotePath) or self.input2E.show_image()
        self.hoverWidgetLabel2E.leaveEvent = lambda event: self.input2E.hide_image()
        self.hoverWidgetLabel2D.enterEvent = lambda event: self.input2D.set_image(wholeNotePath) or self.input2D.show_image()
        self.hoverWidgetLabel2D.leaveEvent = lambda event: self.input2D.hide_image()

        # The labels that display the images of the accidentals for the input music key.
        # Each key_MajorInput label object is 1 accidental of the sequence of up to 7 that are 
        # written in the key signature. The labels' positions correspond to their referenced key's "last"/"added" accidental
        # Ex: keyGMajorInput is the fSharp accidental, keyDMajorInput is the cSharp accidental, etc. 
        # I have commented on the .setGeometry lines of each label object saying where on the staff they sit
    #SHARP KEYS
        # Creates a config list of all the label accidentals in the key signature
        # Format of the lists/config: object name, object position and dimensions, object image path

        # The following list of configs and their subsequent use to create the label objects was taught to me by DeepSeek Chat (DeepSeek, 2025)
        keyInputLabels_configs = [
            ["keyGMajorInput", QtCore.QRect(120, 524, 24, 85), sharpPath],
            ["keyDMajorInput", QtCore.QRect(150, 568, 24, 85), sharpPath],
            ["keyAMajorInput", QtCore.QRect(180, 510, 24, 85), sharpPath],
            ["keyEMajorInput", QtCore.QRect(210, 553, 24, 85), sharpPath],
            ["keyBMajorInputSharp", QtCore.QRect(240, 597, 24, 85), sharpPath],
            ["keyFSharpMajorInput", QtCore.QRect(270, 539, 24, 85), sharpPath],
            ["keyDFlatMajorInputSharp", QtCore.QRect(300, 582, 24, 85), sharpPath],

            ["keyFMajorInput", QtCore.QRect(120, 582, 27, 60), flatPath],
            ["keyBFlatMajorInput", QtCore.QRect(150, 539, 27, 60), flatPath],
            ["keyEFlatMajorInput", QtCore.QRect(180, 597, 27, 60), flatPath],
            ["keyAFlatMajorInput", QtCore.QRect(210, 553, 27, 60), flatPath],
            ["keyDFlatMajorInputFlat", QtCore.QRect(240, 611, 27, 60), flatPath],
            ["keyGFlatMajorInput", QtCore.QRect(270, 568, 27, 60), flatPath],
            ["keyBMajorInputFlat", QtCore.QRect(300, 626, 27, 60), flatPath],
        ]

        self.labels = {}
        # Loops through the configs above to create the input accidentals used in the key signature
        for config in keyInputLabels_configs:
            object_name, geometry, pixmap = config
            label = QtWidgets.QLabel(self.centralwidget)
            label.setGeometry(geometry)
            label.setText("")
            label.setPixmap(QtGui.QPixmap(pixmap))
            label.setScaledContents(True)
            label.setObjectName(object_name)
            setattr(self, object_name, label)  # Set the QLabel as an attribute of self so it can be accessed in other places in the code
            self.labels[object_name] = label  # Store the QLabel in a dictionary
            # The key value would be the name. i.e. keyGMajorInput
            # The key value pair would be the actual object. The geometry, the text, the pixmap (sharpPath/flatPath), the scaled contents boolean, and the name
        
        # Define positions for each celfcombo option 
        # The treble, alto, and bass clefs have their accidentals appear differently in their key signature
        # This dictionary lists the positions and size of each accidental based on the key signature
        self.positions = {
            "Treble": [
                QtCore.QRect(120, 524, 24, 85),  # keyGMajorInput
                QtCore.QRect(150, 568, 24, 85),  # keyDMajorInput
                QtCore.QRect(180, 510, 24, 85),  # keyAMajorInput
                QtCore.QRect(210, 553, 24, 85),  # keyEMajorInput
                QtCore.QRect(240, 597, 24, 85),  # keyBMajorInputSharp
                QtCore.QRect(270, 539, 24, 85),  # keyFSharpMajorInput
                QtCore.QRect(300, 582, 24, 85),  # keyDFlatMajorInputSharp

                QtCore.QRect(120, 582, 27, 60),  # keyFMajorInput
                QtCore.QRect(150, 539, 27, 60),  # keyBFlatMajorInput
                QtCore.QRect(210, 553, 27, 60),  # keyAFlatMajorInput
                QtCore.QRect(180, 597, 27, 60),  # keyEFlatMajorInput
                QtCore.QRect(240, 611, 27, 60),  # keyDFlatMajorInputFlat
                QtCore.QRect(270, 568, 27, 60),  # keyGFlatMajorInput
                QtCore.QRect(300, 626, 27, 60),  # keyBMajorInputFlat
            ],
            "Bass": [
                QtCore.QRect(120, 553, 24, 85),  # keyGMajorInput
                QtCore.QRect(150, 597, 24, 85),  # keyDMajorInput
                QtCore.QRect(180, 539, 24, 85),  # keyAMajorInput
                QtCore.QRect(210, 582, 24, 85),  # keyEMajorInput
                QtCore.QRect(240, 626, 24, 85),  # keyBMajorInputSharp
                QtCore.QRect(270, 568, 24, 85),  # keyFSharpMajorInput
                QtCore.QRect(300, 621, 24, 85),  # keyDFlatMajorInputSharp

                QtCore.QRect(120, 611, 27, 60),  # keyFMajorInput
                QtCore.QRect(150, 568, 27, 60),  # keyBFlatMajorInput
                QtCore.QRect(210, 582, 27, 60),  # keyAFlatMajorInput
                QtCore.QRect(180, 626, 27, 60),  # keyEFlatMajorInput
                QtCore.QRect(240, 640, 27, 60),  # keyDFlatMajorInputFlat
                QtCore.QRect(270, 597, 27, 60),  # keyGFlatMajorInput
                QtCore.QRect(300, 655, 27, 60),  # keyBMajorInputFlat
            ],
            "Alto": [
                QtCore.QRect(120, 539, 24, 85),  # keyGMajorInput
                QtCore.QRect(150, 583, 24, 85),  # keyDMajorInput
                QtCore.QRect(180, 525, 24, 85),  # keyAMajorInput
                QtCore.QRect(210, 568, 24, 85),  # keyEMajorInput
                QtCore.QRect(240, 612, 24, 85),  # keyBMajorInputSharp
                QtCore.QRect(270, 554, 24, 85),  # keyFSharpMajorInput
                QtCore.QRect(300, 597, 24, 85),  # keyDFlatMajorInputSharp

                QtCore.QRect(120, 597, 27, 60),  # keyFMajorInput
                QtCore.QRect(150, 554, 27, 60),  # keyBFlatMajorInput
                QtCore.QRect(210, 568, 27, 60),  # keyAFlatMajorInput
                QtCore.QRect(180, 612, 27, 60),  # keyEFlatMajorInput
                QtCore.QRect(240, 626, 27, 60),  # keyDFlatMajorInputFlat
                QtCore.QRect(270, 583, 27, 60),  # keyGFlatMajorInput
                QtCore.QRect(300, 641, 27, 60),  # keyBMajorInputFlat
            ],
        }

        def updateKeySignaturePositions():
            # Get the current combobox option
            option = self.clefCombo.currentText()

            # Get the new positions for the selected clef
            new_positions = self.positions[option]

            # Update the positions of the accidentals in the key signature
            for i, label in enumerate(self.labels.values()): # .vaules only iterates over key value pairs, which is the actual label objects in this case
                # enumerate() lets me set the index for "i" and the label object which contains the image for "label"
                # The objects in the labels dictionary are in the same order as they are in the positions dictionary key value pairs,
                # So the index of the new_positions corresponds to the correct accidental label
                label.setGeometry(new_positions[i]) # Updates the position of the accidental in the key signature using the positions dictionary above

        # Instrument key combo code
        self.instrumentKeyLabel = QtWidgets.QLabel(self.centralwidget)
        self.instrumentKeyLabel.setGeometry(QtCore.QRect(370, 30, 161, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.instrumentKeyLabel.setFont(font)
        self.instrumentKeyLabel.setObjectName("instrumentKeyLabel")
        self.instrumentKeyCombo = QtWidgets.QComboBox(self.centralwidget)
        self.instrumentKeyCombo.setGeometry(QtCore.QRect(370, 100, 161, 81))
        font = QtGui.QFont()
        font.setPointSize(11)

        self.instrumentKeyCombo.setFont(font)
        self.instrumentKeyCombo.setObjectName("instrumentKeyCombo")
        self.instrumentKeyCombo.addItems([""]*6)

        # Accidental combo code
        self.accidentalLabel = QtWidgets.QLabel(self.centralwidget)
        self.accidentalLabel.setGeometry(QtCore.QRect(610, 30, 121, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.accidentalLabel.setFont(font)
        self.accidentalLabel.setObjectName("accidentalLabel")
        
        self.accidentalCombo = QtWidgets.QComboBox(self.centralwidget)
        self.accidentalCombo.setGeometry(QtCore.QRect(610, 100, 121, 81))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.accidentalCombo.setFont(font)
        self.accidentalCombo.setObjectName("accidentalCombo")
        self.accidentalCombo.addItems([""]*4)

        # Clef combo code
        self.clefIn = QtWidgets.QLabel(self.centralwidget)
        self.clefIn.setGeometry(QtCore.QRect(30, 547, 90, 180))
        self.clefIn.setText("")
        self.clefIn.setPixmap(QtGui.QPixmap(trebelClefPath))
        self.clefIn.setScaledContents(True)
        self.clefIn.setObjectName("clefIn")

        self.clefLabel = QtWidgets.QLabel(self.centralwidget)
        self.clefLabel.setGeometry(QtCore.QRect(810, 30, 121, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.clefLabel.setFont(font)
        self.clefLabel.setObjectName("clefLabel")
        
        self.clefCombo = QtWidgets.QComboBox(self.centralwidget)
        self.clefCombo.setGeometry(QtCore.QRect(810, 100, 121, 81))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.clefCombo.setFont(font)
        self.clefCombo.setObjectName("clefCombo")
        self.clefCombo.addItems([""]*3)

        # Slot function to be called when the clefCombo is activated
        # changes the clef image
        # changes dimensions and position to fit the clef
        def clefChange():
            clef = self.clefCombo.currentText()
            if clef == "Treble":
                self.clefIn.setPixmap(QtGui.QPixmap(trebelClefPath))
                self.clefIn.setGeometry(30, 547, 90, 180)
            if clef == "Alto":
                self.clefIn.setPixmap(QtGui.QPixmap(altoClefPath))
                self.clefIn.setGeometry(30, 559, 88, 133)  # Change geometry and y pos slightly so if fits the staff correctly
            if clef == "Bass":
                self.clefIn.setPixmap(QtGui.QPixmap(bassClefPath))
                self.clefIn.setGeometry(30, 567, 85, 101)   # Change geometry and y pos slightly so if fits the staff correctly
        # Connect the activated signal of the combo box to the slot
        # A.K.A, when the combo box's value is changed, this line of code will run
        # This line calls the clefChange method defined above
        self.clefCombo.currentIndexChanged.connect(clefChange)
        # This line calls the updateKeySignaturePositions defined further above
        self.clefCombo.currentIndexChanged.connect(updateKeySignaturePositions) # Connect signal to slot

        # Music key combo code
        self.musicKeyLabel = QtWidgets.QLabel(self.centralwidget)
        self.musicKeyLabel.setGeometry(QtCore.QRect(10, 30, 250, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setKerning(True)
        self.musicKeyLabel.setFont(font)
        self.musicKeyLabel.setObjectName("musicKeyLabel")
        self.musicKeyCombo = QtWidgets.QComboBox(self.centralwidget)
        self.musicKeyCombo.setGeometry(QtCore.QRect(10, 100, 281, 81))
        font = QtGui.QFont()
        font.setPointSize(11)

        self.musicKeyCombo.setFont(font)
        self.musicKeyCombo.setObjectName("musicKeyCombo")
        self.musicKeyCombo.addItems([""]*15)

        # Changing the music key with the musicKeyCombo comboBox
        def musicKeyChange():
            #clear the key
            self.clearKey()

            # Each show"_"Major method displays its corresponding accidental
            # SHARP KEYS
            def showGMajor():
                self.keyGMajorInput.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyGMajorInput.show()
                self.keyGMajorInput.resize(QSize(24,85))
            def showDMajor():
                self.keyDMajorInput.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyDMajorInput.show()
                self.keyDMajorInput.resize(QSize(24,85))
            def showAMajor():
                self.keyAMajorInput.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyAMajorInput.show()
                self.keyAMajorInput.resize(QSize(24,85))
            def showEMajor():
                self.keyEMajorInput.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyEMajorInput.show()
                self.keyEMajorInput.resize(QSize(24,85))
            def showBMajorSharp():
                self.keyBMajorInputSharp.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyBMajorInputSharp.show()
                self.keyBMajorInputSharp.resize(QSize(24,85))
            def showFSharpMajor():
                self.keyFSharpMajorInput.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyFSharpMajorInput.show()
                self.keyFSharpMajorInput.resize(QSize(24,85))
            def showDFlatMajorSharp():
                self.keyDFlatMajorInputSharp.setPixmap(QtGui.QPixmap(sharpPath))
                self.keyDFlatMajorInputSharp.show()
                self.keyDFlatMajorInputSharp.resize(QSize(24,85))

            # FLAT KEYS
            def showFMajor():
                self.keyFMajorInput.setPixmap(QtGui.QPixmap(flatPath))
                self.keyFMajorInput.show()
                self.keyFMajorInput.resize(QSize(27,60))
            def showBFlatMajor():
                self.keyBFlatMajorInput.setPixmap(QtGui.QPixmap(flatPath))
                self.keyBFlatMajorInput.show()
                self.keyBFlatMajorInput.resize(QSize(27,60))
            def showEFlatMajor():
                self.keyEFlatMajorInput.setPixmap(QtGui.QPixmap(flatPath))
                self.keyEFlatMajorInput.show()
                self.keyEFlatMajorInput.resize(QSize(27,60))
            def showAFlatMajor():
                self.keyAFlatMajorInput.setPixmap(QtGui.QPixmap(flatPath))
                self.keyAFlatMajorInput.show()
                self.keyAFlatMajorInput.resize(QSize(27,60))
            def showDFlatMajorFlat():
                self.keyDFlatMajorInputFlat.setPixmap(QtGui.QPixmap(flatPath))
                self.keyDFlatMajorInputFlat.show()
                self.keyDFlatMajorInputFlat.resize(QSize(27,60))
            def showGFlatMajor():
                self.keyGFlatMajorInput.setPixmap(QtGui.QPixmap(flatPath))
                self.keyGFlatMajorInput.show()
                self.keyGFlatMajorInput.resize(QSize(27,60))
            def showBMajorFlat():
                self.keyBMajorInputFlat.setPixmap(QtGui.QPixmap(flatPath))
                self.keyBMajorInputFlat.show()
                self.keyBMajorInputFlat.resize(QSize(27,60))

            # Make variable for the selected key which is used in the code below
            musicKey = self.musicKeyCombo.currentText()

            # SHARP KEYS
            # Display the selected key in the combo box on the staff
            # Each show_Major method is just displaying each accidental in the flat/sharp music key sequence,
            # so I just copy paste the code from one to the other and add the method to display the next accidental.
            if musicKey == "G major / E minor":
                showGMajor()
            elif musicKey == "D major / B minor":
                showGMajor()
                showDMajor()
            elif musicKey == "A major / F# minor":
                showGMajor()
                showDMajor()
                showAMajor()
            elif musicKey == "E major / C# minor":
                showGMajor()
                showDMajor()
                showAMajor()
                showEMajor()
            elif musicKey == "B major / G# minor (sharps)":
                showGMajor()
                showDMajor()
                showAMajor()
                showEMajor()
                showBMajorSharp()
            elif musicKey == "F# major / D# minor":
                showGMajor()
                showDMajor()
                showAMajor()
                showEMajor()
                showBMajorSharp()
                showFSharpMajor()
            elif musicKey == "Db major / Bb minor (sharps)":
                showGMajor()
                showDMajor()
                showAMajor()
                showEMajor()
                showBMajorSharp()
                showFSharpMajor()
                showDFlatMajorSharp()
            
            # FLAT KEYS
            # Display the selected key in the combo box on the staff
            if musicKey == "F major / D minor":
                showFMajor()
            elif musicKey == "Bb major / G minor":
                showFMajor()
                showBFlatMajor()
            elif musicKey == "Eb major / C minor":
                showFMajor()
                showBFlatMajor()
                showEFlatMajor()
            elif musicKey == "Ab major / F minor":
                showFMajor()
                showBFlatMajor()
                showEFlatMajor()
                showAFlatMajor()
            elif musicKey == "Db major / Bb minor (flats)":
                showFMajor()
                showBFlatMajor()
                showEFlatMajor()
                showAFlatMajor()
                showDFlatMajorFlat()
            elif musicKey == "Gb major / Eb minor":
                showFMajor()
                showBFlatMajor()
                showEFlatMajor()
                showAFlatMajor()
                showDFlatMajorFlat()
                showGFlatMajor()
            elif musicKey == "B major / G# minor (flats)":
                showFMajor()
                showBFlatMajor()
                showEFlatMajor()
                showAFlatMajor()
                showDFlatMajorFlat()
                showGFlatMajor()
                showBMajorFlat()
        # Connect the activated signal of the combo box to the slot
        # A.K.A, when the combo box's value is changed, this line of code will run
        # This line calls the musicKeyChange method defined above
        self.musicKeyCombo.currentIndexChanged.connect(musicKeyChange)

        # This is the green elongated box you see on the left/input staff
        # It functions to help visually guide the user on how to use the program
        self.noteIndicator = QtWidgets.QLabel(self.centralwidget)
        self.noteIndicator.setGeometry(QtCore.QRect(400, 273, 141, 671))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.noteIndicator.setFont(font)
        self.noteIndicator.setStyleSheet("QLabel{\n"
                                        "    border: 2px solid rgb(0, 86, 0);\n"
                                        "    border-radius:20px;\n"
                                        "    color:  rgb(0, 86, 0);\n"
                                        "}\n"
                                        "")
        self.noteIndicator.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.noteIndicator.setWordWrap(True)
        self.noteIndicator.setObjectName("noteIndicator")

        # clear button
        self.clear = QtWidgets.QPushButton(self.centralwidget)
        self.clear.setGeometry(QtCore.QRect(1300, 100, 521, 131))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.clear.setFont(font)
        self.clear.setObjectName("clear")

        # Changing the layer order of objects in the program
        self.noteIndicator.raise_()
        self.eNote.raise_()
        self.line1.raise_()
        self.line2.raise_()
        self.line3.raise_()
        self.line4.raise_()
        self.line5.raise_()
        self.clefOut.raise_()
        self.cNote.raise_()
        self.aNote.raise_()
        self.fNote.raise_()
        self.aOutAccidental.raise_()
        self.eOutAccidental.raise_()
        self.gNote.raise_()
        self.gOutAccidental.raise_()
        self.bNote.raise_()
        self.bOutAccidental.raise_()
        self.dNote.raise_()
        self.dOutAccidental.raise_()
        self.outputLabel.raise_()
        self.musicKeyCombo.raise_()
        self.musicKeyLabel.raise_()
        self.fOutAccidental.raise_()
        self.cOutAccidental.raise_()
        self.arrow.raise_()
        self.line0_12.raise_()
        self.line0_9.raise_()
        self.line0_8.raise_()
        self.line0_10.raise_()
        self.line0_11.raise_()
        self.clefIn.raise_()
        self.input4A.raise_()
        self.input5E.raise_()
        self.input5D.raise_()
        self.input4G.raise_()
        self.input4B.raise_()
        self.input5C.raise_()
        self.input4F.raise_()
        self.line0_15.raise_()
        self.line0_17.raise_()
        self.line0_19.raise_()
        self.line0_14.raise_()
        self.line0_13.raise_()
        self.line0_18.raise_()
        self.line0_16.raise_()
        self.input5G.raise_()
        self.input6F.raise_()
        self.input6D.raise_()
        self.input5B.raise_()
        self.input6A.raise_()
        self.input7E.raise_()
        self.input7G.raise_()
        self.input7C.raise_()
        self.input2D.raise_()
        self.input2A.raise_()
        self.input4D.raise_()
        self.input3C.raise_()
        self.input3E.raise_()
        self.input3G.raise_()
        self.input3B.raise_()
        self.input2F.raise_() 
        self.input7D.raise_()
        self.input7F.raise_()
        self.input4E.raise_()
        self.input6C.raise_()
        self.input3A.raise_()
        self.input4C.raise_()
        self.input3F.raise_()
        self.input5F.raise_()
        self.input5A.raise_()
        self.input6B.raise_()
        self.input2B.raise_()
        self.input3D.raise_()
        self.input2G.raise_()
        self.input6E.raise_()
        self.input6G.raise_()
        self.input2E.raise_()
        self.line0_1.raise_()
        self.line0_6.raise_()
        self.line0_4.raise_()
        self.line0_7.raise_()
        self.line0_5.raise_()
        self.line0_2.raise_()
        self.line0_3.raise_()
        self.keyGMajorInput.raise_()
        self.keyDMajorInput.raise_()
        self.keyAMajorInput.raise_()
        self.keyEMajorInput.raise_()
        self.keyBMajorInputSharp.raise_()
        self.keyFSharpMajorInput.raise_()
        self.keyDFlatMajorInputSharp.raise_()
        self.keyFMajorInput.raise_()
        self.keyBFlatMajorInput.raise_()
        self.keyEFlatMajorInput.raise_()
        self.keyAFlatMajorInput.raise_()
        self.keyDFlatMajorInputFlat.raise_()
        self.keyGFlatMajorInput.raise_()
        self.keyBMajorInputFlat.raise_()
        self.instrumentKeyLabel.raise_()
        self.instrumentKeyCombo.raise_()
        self.accidentalLabel.raise_()
        self.accidentalCombo.raise_()
        self.clefLabel.raise_()
        self.clefCombo.raise_()
        # Important that the hoverWidgetLabels are raised above the rest of the objects so that they can be clicked on
        self.hoverWidgetLabel5D.raise_()
        self.hoverWidgetLabel5F.raise_()
        self.hoverWidgetLabel5E.raise_()
        self.hoverWidgetLabel5C.raise_()
        self.hoverWidgetLabel4B.raise_()
        self.hoverWidgetLabel4G.raise_()
        self.hoverWidgetLabel4A.raise_()
        self.hoverWidgetLabel4F.raise_()
        self.hoverWidgetLabel3E.raise_()
        self.hoverWidgetLabel4E.raise_()
        self.hoverWidgetLabel4C.raise_()
        self.hoverWidgetLabel4D.raise_()
        self.hoverWidgetLabel3B.raise_()
        self.hoverWidgetLabel3G.raise_()
        self.hoverWidgetLabel3A.raise_()
        self.hoverWidgetLabel3F.raise_()
        self.hoverWidgetLabel2D.raise_()
        self.hoverWidgetLabel3D.raise_()
        self.hoverWidgetLabel2B.raise_()
        self.hoverWidgetLabel3C.raise_()
        self.hoverWidgetLabel2A.raise_()
        self.hoverWidgetLabel2F.raise_()
        self.hoverWidgetLabel2G.raise_()
        self.hoverWidgetLabel2E.raise_()
        self.hoverWidgetLabel7G.raise_()
        self.hoverWidgetLabel6E.raise_()
        self.hoverWidgetLabel7C.raise_()
        self.hoverWidgetLabel7F.raise_()
        self.hoverWidgetLabel7D.raise_()
        self.hoverWidgetLabel5G.raise_()
        self.hoverWidgetLabel6G.raise_()
        self.hoverWidgetLabel5A.raise_()
        self.hoverWidgetLabel6B.raise_()
        self.hoverWidgetLabel6F.raise_()
        self.hoverWidgetLabel5B.raise_()
        self.hoverWidgetLabel6A.raise_()
        self.hoverWidgetLabel7E.raise_()
        self.hoverWidgetLabel6C.raise_()
        self.hoverWidgetLabel6D.raise_()
        self.clear.raise_()

        # menu bar and status bar not used in code
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.musicKeyCombo, self.instrumentKeyCombo)
        MainWindow.setTabOrder(self.instrumentKeyCombo, self.accidentalCombo)
        MainWindow.setTabOrder(self.accidentalCombo, self.clefCombo)

        # All the notes, accidentals, and key accidental images are automatically loaded
        # Call the clearKey method to hide all the loaded images
        self.clearKey()

        # clearNotes method hides all visible accidentals and notes on the output staff
        # When the button widget "clear" is pressed, the clearNotes method is called
        self.clearNotes()
        self.clear.clicked.connect(self.clearNotes)
        
    # Automatically created when using a pyqt designer file
    # All UI strings are defined in one place making it easy to update wording globally
    # Also keeps text definitions separate from functional logic

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.outputLabel.setText(_translate("MainWindow", "Treble Clef in Concert C Major"))
        self.musicKeyCombo.setItemText(0, _translate("MainWindow", "C major / A minor"))
        self.musicKeyCombo.setItemText(1, _translate("MainWindow", "G major / E minor"))
        self.musicKeyCombo.setItemText(2, _translate("MainWindow", "D major / B minor"))
        self.musicKeyCombo.setItemText(3, _translate("MainWindow", "A major / F# minor"))
        self.musicKeyCombo.setItemText(4, _translate("MainWindow", "E major / C# minor"))
        self.musicKeyCombo.setItemText(5, _translate("MainWindow", "B major / G# minor (sharps)"))
        self.musicKeyCombo.setItemText(6, _translate("MainWindow", "F# major / D# minor"))
        self.musicKeyCombo.setItemText(7, _translate("MainWindow", "Db major / Bb minor (sharps)"))
        self.musicKeyCombo.setItemText(8, _translate("MainWindow", "F major / D minor"))
        self.musicKeyCombo.setItemText(9, _translate("MainWindow", "Bb major / G minor"))
        self.musicKeyCombo.setItemText(10, _translate("MainWindow", "Eb major / C minor"))
        self.musicKeyCombo.setItemText(11, _translate("MainWindow", "Ab major / F minor"))
        self.musicKeyCombo.setItemText(12, _translate("MainWindow", "Db major / Bb minor (flats)"))
        self.musicKeyCombo.setItemText(13, _translate("MainWindow", "Gb major / Eb minor"))
        self.musicKeyCombo.setItemText(14, _translate("MainWindow", "B major / G# minor (flats)"))
        self.musicKeyLabel.setText(_translate("MainWindow", "Music Key (Concert Key)"))
        self.instrumentKeyLabel.setText(_translate("MainWindow", "Instrument Key"))
        self.instrumentKeyCombo.setItemText(0, _translate("MainWindow", "C"))
        self.instrumentKeyCombo.setItemText(1, _translate("MainWindow", "Eb"))
        self.instrumentKeyCombo.setItemText(2, _translate("MainWindow", "F"))
        self.instrumentKeyCombo.setItemText(3, _translate("MainWindow", "G"))
        self.instrumentKeyCombo.setItemText(4, _translate("MainWindow", "A"))
        self.instrumentKeyCombo.setItemText(5, _translate("MainWindow", "Bb"))
        self.accidentalLabel.setText(_translate("MainWindow", "Accidentals"))
        self.accidentalCombo.setItemText(0, _translate("MainWindow", "Match Key"))
        self.accidentalCombo.setItemText(1, _translate("MainWindow", "Flat"))
        self.accidentalCombo.setItemText(2, _translate("MainWindow", "Sharp"))
        self.accidentalCombo.setItemText(3, _translate("MainWindow", "Natural"))
        self.clefLabel.setText(_translate("MainWindow", "Clef"))
        self.clefCombo.setItemText(0, _translate("MainWindow", "Treble"))
        self.clefCombo.setItemText(1, _translate("MainWindow", "Alto"))
        self.clefCombo.setItemText(2, _translate("MainWindow", "Bass"))
        self.noteIndicator.setText(_translate("MainWindow", "Input Notes Here"))
        self.clear.setText(_translate("MainWindow", "Clear Notes"))

    # clears all of the accidentals in the music key
    def clearKey(self):
        self.keyGMajorInput.hide()
        self.keyDMajorInput.hide()
        self.keyAMajorInput.hide()
        self.keyEMajorInput.hide()
        self.keyBMajorInputSharp.hide()
        self.keyFSharpMajorInput.hide()
        self.keyDFlatMajorInputSharp.hide()
        self.keyFMajorInput.hide()
        self.keyBFlatMajorInput.hide()
        self.keyEFlatMajorInput.hide()
        self.keyAFlatMajorInput.hide()
        self.keyDFlatMajorInputFlat.hide()
        self.keyGFlatMajorInput.hide()
        self.keyBMajorInputFlat.hide()

    # clears all of the notes and the accidents on the output staff
    # accidentalTheme is set to "blank"
    # This prevents notes from being stuck in sharp or flat format after clearing the output staff
    def clearNotes(self):
        global accidentalTheme
        accidentalTheme = "Natural"
        self.eNote.clear()
        self.cNote.clear()
        self.aNote.clear()
        self.fNote.clear()
        self.dNote.clear()
        self.bNote.clear()
        self.gNote.clear()
        self.eOutAccidental.clear()
        self.aOutAccidental.clear()
        self.dOutAccidental.clear()
        self.bOutAccidental.clear()
        self.gOutAccidental.clear()
        self.cOutAccidental.clear()
        self.fOutAccidental.clear()

    def findAccidentalTheme (self):
        # global accidentalTheme

        # List of all the music keys and whether or not they have sharps or flats
        key_Signatures = {
            "C major / A minor": "Natural",
            "G major / E minor": "Sharp",
            "D major / B minor": "Sharp",
            "A major / F# minor": "Sharp",
            "E major / C# minor": "Sharp",
            "B major / G# minor (sharps)": "Sharp",
            "F# major / D# minor": "Sharp",
            "Db major / Bb minor (sharps)": "Sharp",
            "F major / D minor": "Flat",
            "Bb major / G minor": "Flat",
            "Eb major / C minor": "Flat",
            "Ab major / F minor": "Flat",
            "Db major / Bb minor (flats)": "Flat",
            "Gb major / Eb minor": "Flat",
            "B major / G# minor (flats)": "Flat",
        }

        # List of all instrument keys and whether they transpose to sharps or flats
        instrument_keys = {
            "C": "Natural",  
            "Eb": "Flat",
            "F": "Flat",
            "G": "Sharp",
            "A": "Sharp",
            "Bb": "Flat",
        }

        musicKey = self.musicKeyCombo.currentText()
        instrumentKey = self.instrumentKeyCombo.currentText()
        if not (accidentalTheme == "Flat" or accidentalTheme == "Sharp"):
            if musicKey != "C major / A minor":
                return key_Signatures[musicKey] # If the music key is not C major, return whether the key signature has flats or sharps
            elif self.accidentalCombo.currentText() == "Sharp":
                return "Sharp" # If the key is C major, return what is contained in the accidentalCombo
            elif self.accidentalCombo.currentText() == "Flat":
                return "Flat"
            elif instrumentKey != "C":
                return instrument_keys[instrumentKey] # If the instrument key is not C, return whether the selected instrument key transposes to flats or sharps
            else:
                return "Natural" # If the music key is C major, instrument key is C, and accidental combo is natural or match key, the theme stays as natural
        else:
            return accidentalTheme # If the accidental theme has already been set to flat or sharp, accidentalTheme is not changed

    # When clef is Bass or Alto, notes need to be "transposed" due to the notes that are returned when inputing one are inherently
    # set to a treble clef format
    # String: "G" through "A"
    def transposeClef(self, note):
        clefs = [
            #Treble: clefs[0]
            ["C", "D", "E", "F", "G", "A", "B"],
            #Bass equivalent: clefs[1]
            ["E", "F", "G", "A", "B", "C", "D"],
            #Alto equivalent: clefs[2]
            ["D", "E", "F", "G", "A", "B", "C"],
        ]

        index = clefs[0].index(note)

        if self.clefCombo.currentText() == "Bass":
            return clefs[1][index]
        elif self.clefCombo.currentText() == "Alto":
            return clefs[2][index]
        else:
            return note # if the clef is Treble, the note is not changed

    # Returns whether the inputted note is Natural, Sharp, Or Flat
    def determineAccidental(self, note):
        key_Signatures = {
            "C major / A minor": [[], ""],
            "G major / E minor": [["F"], "Sharp"],     # In format of: "Name of Key Signature": [[list of notes that are made accidentals by the key], accidental type]
            "D major / B minor": [["F", "C"], "Sharp"],
            "A major / F# minor": [["F", "C", "G"], "Sharp"],
            "E major / C# minor": [["F", "C", "G", "D"], "Sharp"],
            "B major / G# minor (sharps)": [["F", "C", "G", "D", "A"], "Sharp"],
            "F# major / D# minor": [["F", "C", "G", "D", "A", "E"], "Sharp"],
            "Db major / Bb minor (sharps)": [["F", "C", "G", "D", "A", "E", "B"], "Sharp"],
            "F major / D minor": [["B"], "Flat"],
            "Bb major / G minor": [["B", "E"], "Flat"],
            "Eb major / C minor": [["B", "E", "A"], "Flat"],
            "Ab major / F minor": [["B", "E", "A", "D"], "Flat"],
            "Db major / Bb minor (flats)": [["B", "E", "A", "D", "G"], "Flat"],
            "Gb major / Eb minor": [["B", "E", "A", "D", "G", "C"], "Flat"],
            "B major / G# minor (flats)": [["B", "E", "A", "D", "G", "C", "F"], "Flat"],
        }
        
        if self.accidentalCombo.currentText()  == "Sharp":
            return "Sharp"
        elif self.accidentalCombo.currentText()  == "Flat":
            return "Flat"
        elif self.accidentalCombo.currentText()  == "Match Key":
            musicKey = self.musicKeyCombo.currentText()
            accidentals = key_Signatures[musicKey][0] # Creates list of notes for corresponding key signature (uses the key value pair from the dictionary)
            if accidentals.count(note) > 0: # Runs if the note parameter is included in the accidentals list (if it has an accidental)
                return key_Signatures[musicKey][1] # Returns "Flat" or "Sharp". Returns the accidental the note has. Returns the second key value pair of the corresponding key signature
            else:
                return "Natural" # If the note is note found in the accidentals list, the note is not sharp or flat, it is natural
        else:
            return "Natural" # returns on the condition that accidentalCombo is set to "Natural"

    def transposeInstrumentKey(self, note):
        # Direct transposition mappings for each instrument key
        # Key value = note being transposed
        # Key value pair = transposed note

        # For Eb instruments
        eb_transposition = {
            "C": ("Eb"), "D": ("F"), "E": ("G"), "F": ("Ab"), 
            "G": ("Bb"), "A": ("C"), "B": ("D")
        }
        
        # For F instruments
        f_transposition = {
            "C": ("F"), "D": ("G"), "E": ("A"), "F": ("Bb"), 
            "G": ("C"), "A": ("D"), "B": ("E")
        }
        
        # For G instruments
        g_transposition = {
            "C": ("G"), "D": ("A"), "E": ("B"), "F": ("C"), 
            "G": ("D"), "A": ("E"), "B": ("F#")
        }
        
        # For A instruments
        a_transposition = {
            "C": ("A"), "D": ("B"), "E": ("C#"), "F": ("D"), 
            "G": ("E"), "A": ("F#"), "B": ("G#")
        }

        # For Bb instruments
        bb_transposition = {
            "C": ("Bb"), "D": ("C"), "E": ("D"), "F": ("Eb"), 
            "G": ("F"), "A": ("G"), "B": ("A")
        }

        # Map instrument keys to their respective transposition maps
        # Key value = instrument key
        # Key value pair = corresponding tranposition map
        transposition_maps = {
            "C": None,  # C instruments don't need transposition
            "Eb": eb_transposition,
            "F": f_transposition,
            "G": g_transposition,
            "A": a_transposition,
            "Bb": bb_transposition
        }

        instrumentKey = self.instrumentKeyCombo.currentText()
        if instrumentKey != "C":
            transpositionMap = transposition_maps[instrumentKey] # Use transposition map that matches the instrumentKeyCombo
            transposedNote = transpositionMap[note] # Find the key value pair/transposed note for the note patameter
            return transposedNote
        else:
            return note # If the instrument key is C, the note is not changed
        
    def applyAccidental(self, note, accidental):
        # 2 lists, one for if the accidental is a sharp and the other if the accidental is a flat
        sharps = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
        flats = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"]

        if accidental == "Flat":
            try: index = flats.index(note)
            except: index = sharps.index(note)
            index -= 1  # If a note is flat it is shifted down a half step. Subtracting 1 is equivalent to that
            if index == -1: # If the note is "C", the index will be out of bounds at -1. This makes it "wrap" the list
                index == 11 # The index is correctly changed to be that of "B". (Cb = B)
            return flats[index]
        elif accidental == "Sharp":
            try: index = sharps.index(note)
            except: index = flats.index(note)
            index += 1 # If a note is sharp it is shifted up a half step. Adding 1 is equivalent to that
            if index == 12: # If the note is "B", the index will be out of bounds at 12. This makes it "wrap" the list
                index = 0 # The index is correctly change to be that of "C". (B# = C)
            return sharps[index]
        else:
            return note # If the note is note sharp or flat, the note is not changed
    
    def matchAccidentalTheme(self, note):
        # global accidentalTheme
        # 2 lists, one for if the accidental is a sharp and the other if the accidental is a flat
        sharps = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
        flats = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"]

        # If other notes are already sharp, but the note is flat
        if accidentalTheme == "Sharp" and note.count("b") == 1: # .count method is case sensitive, so "Bb" would only return 1 and "B" would return 0
            # Takes index of note in flats list to find equivalent sharp note
            index = flats.index(note)
            newNote = sharps[index]
            return newNote
        # If other notes are already flat, but the note is sharp
        elif accidentalTheme == "Flat" and note.count("#") == 1:
            # Takes index of note in sharps list to find equivalent flat note
            index = sharps.index(note)
            newNote = flats[index]
            return newNote
        else:
            return note # If there's no accidentalTheme yet or if the note is not flat or sharp, the note is unchanged
        
    # This method is specifically for if the music key is:
    # F# major / D# minor, Db major / Bb minor (sharps), Gb major / Eb minor, or B major/ G# minor (flats)
    # These key signatures apply sharps and flats to notes that usually don't have sharps/flats.
    # For example, F# major / D# minor applies sharps to E. Usually, E# should be written as F, and that's how the applyAccidental() method works
    # but for this specific key, I need to change the F to E#
    def matchSpecialKeys(self, note):
        # global accidentalTheme
        musicKey = self.musicKeyCombo.currentText()
        accidental = self.accidentalCombo.currentText()
        if accidental != "Natural":
            if note == "F" and (musicKey == "F# major / D# major" or musicKey == "Db major / Bb minor (sharps)") and (accidentalTheme == "Sharp"):
                return "E#"
            elif note == "C" and (musicKey == "Db major / Bb minor (sharps)") and (accidentalTheme == "Sharp"): # If the note to be returned is sharp but other notes are already flat, the note isn't changed
                return "B#"
            elif note == "B" and (musicKey == "Gb major / Eb minor" or musicKey == "B major / G# minor (flats)") and (accidentalTheme == "Flat"):
                return "Cb"
            elif note == "E" and (musicKey == "B major / G# minor (flats)") and (accidentalTheme == "Flat"): # If the note to be returned is flat but other notes are already sharp, the note isn't changed
                return "Fb"
        return note # If the note is not one that is different for the specific keys, or the music keys are not the specific ones, the note is unchanges
    
    def displayNote(self, note):
        noteAlone = note.strip("#b") # Note = "Eb" --> noteAlone = "E"
        accidentalAlone = note.strip("ABCDEFG") # Note = "Eb" --> accidentalAllong = "b"

        # creates a list of prefixes
        prefixes = ["g", "f", "e", "d", "c", "b", "a"]
        index = prefixes.index(noteAlone.lower())

        objectName = f"{prefixes[index]}Note" # Determines which output label widget will have it's note image displayed
        obj = getattr(self, objectName)
        obj.setPixmap(QtGui.QPixmap(wholeNotePath))

        objectName = f"{prefixes[index]}OutAccidental" # Determines which output label widget will have it's accidental image displayed
        obj = getattr(self, objectName)
        if accidentalAlone == "#": # If the accidental is sharp, display the sharp accidental
            obj.resize(QSize(24,85))
            obj.setPixmap(QtGui.QPixmap(sharpPath))
        elif accidentalAlone == "b": # If the accidental is flat, display the flat accidental
            obj.resize(QSize(27,60))
            obj.setPixmap(QtGui.QPixmap(flatPath))


    # note = string value of A-G
    # The draw Note method takes into account all the different variables of the inputed note. 
    # The note position, clef, accidentals, music key, and instrument key are all considered.
    # All the elements are used to correctly transpose the note into Treble clef Concert C Major key. 
    # The method displays the transposed note onto the output staff
    def drawNote(self, note):
        global accidentalTheme
        print("==================== New Note ====================")
        print(f"Note {note} inputted")
        # Determines whether accidental theme is Natural, Sharp, or Flat.
        # If the accidentalTheme is already flat or sharp, it is not changed
        accidentalTheme = self.findAccidentalTheme()
        print(f"Accidental Theme: {accidentalTheme}")

        # Returns a note transposed based on the clef selected in the clefCombo
        prevNote = note
        note = self.transposeClef(note)
        print(f"Clef: {self.clefCombo.currentText()}  ->  Transposed {prevNote} to {note}")

        # Returns Flat, Sharp, or Natural based on the music keys or if Flat or Sharp is selected in the accidentalCombo
        accidental = self.determineAccidental(note)
        print(f"Storing Accidental: {accidental}")

        # Returns a note transposed based on the instrument key selected in the instrumentKeyCombo
        prevNote = note
        note = self.transposeInstrumentKey(note)
        print(f"Instrument Key: {self.instrumentKeyCombo.currentText()}  ->  Transposed {prevNote} to {note}")

        # Returns a note that has the previously determined accidental applied to the previously transposed note
        prevNote = note
        note = self.applyAccidental(note, accidental)
        print(f"Applying Stored Accidental: {accidental}  ->  Changed {prevNote} to {note}")

        # Returns an equivalent note based on the global accidental theme variable
        prevNote = note
        note = self.matchAccidentalTheme(note)
        print(f"Matching Note to Accidental Theme \"{accidentalTheme}\"  ->  Changed {prevNote} to {note}")

        # Returns an equivalent note based on if certain music keys were selected and if a certain note is inputted
        prevNote = note
        note = self.matchSpecialKeys(note)
        print(f"Changing Note if Certain Key  |  Music Key: {self.musicKeyCombo.currentText()}  ->  Changed {prevNote} to {note}")

        # Displays the note on the output clef
        print(f"Displaying {note}")
        self.displayNote(note)
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    # setting window color to white mainly for the macOS application
    palette = MainWindow.palette()
    palette.setColor(QPalette.Window, QColor('white'))
    MainWindow.setPalette(palette)
    MainWindow.setAutoFillBackground(True)

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
